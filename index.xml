<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kenneth Feng</title>
    <link>http://kfeng.me/</link>
    <description>Recent content on Kenneth Feng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Apr 2015 23:42:00 -0400</lastBuildDate>
    <atom:link href="http://kfeng.me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Docker for Development</title>
      <link>http://kfeng.me/2015/04/using-docker-for-development/</link>
      <pubDate>Sun, 12 Apr 2015 23:42:00 -0400</pubDate>
      
      <guid>http://kfeng.me/2015/04/using-docker-for-development/</guid>
      <description>&lt;p&gt;&lt;br/&gt;
Docker is the new kid on the block.  I believe it is going to change how we develop software.
Over the past few months, I have been trying to fit Docker into my daily workflow.  I finally cracked the formula.  It is amazing how easy it is.  We are going to piece together make, docker, and docker-compose (formerly known as fig) to streamline the workflow.&lt;/p&gt;

&lt;p&gt;For the purpose of this article, we are going to assume we have a web application which needs a postgres database as the backend.  With the power of docker and docker compose, we can quickly spin up the database quickly.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s just say you already have the following Production Dockerfile configured.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM kennethzfeng/dockerize-python:2.7.8-onbuild


EXPOSE 8000

ENV APPLICATION_ENV Production

CMD [&amp;quot;gunicorn&amp;quot;, &amp;quot;app:app&amp;quot;, &amp;quot;--worker-class&amp;quot;, &amp;quot;gevent&amp;quot;, &amp;quot;-b&amp;quot;, &amp;quot;0.0.0.0:8000&amp;quot;]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to create a development version of Dockerfile called it something like &lt;code&gt;Dockerfile.dev&lt;/code&gt;.  Since we are going to mount the repository on the host machine to the web container instead of copying them over to the container on every signle build, this not only will save us tons Of time when building images, but also will serve as our hot reload.&lt;/p&gt;

&lt;p&gt;Specifically, we mount the repository directory &lt;code&gt;.&lt;/code&gt; on the host machine to &lt;code&gt;/usr/src/app&lt;/code&gt; inside the web container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM kennethzfeng/dockerize-python:2.7.8

RUN mkdir -p /usr/src/deps
WORKDIR /usr/src/deps
COPY requirements.txt /usr/src/deps/

RUN pip install -r requirements.txt

EXPOSE 8000

ENV APPLICATION_ENV Development
VOLUME /usr/src/app
WORKDIR /usr/src/app

CMD [&amp;quot;python&amp;quot;, &amp;quot;run_dev.py&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Building the Image&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the time of writing this, Docker Compose doesn&amp;rsquo;t support building image using any file other than the default &lt;code&gt;Dockerfile&lt;/code&gt;.  (If you find a way to do this, please let me know.)  A workaround was using a Makefile goal to automate this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker_build_image:
    docker build -f Dockerfile.dev --name demo-app-dev .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Docker-Compose&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Docker-Compose is very important to this whole workflow because it saves us from managing the container lifecycle ourselves.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# create the container
docker run --name abc demo-app-dev

# done with the container
# kill the container and remove the container
docker kill abc
docker rm abc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is just for managing the web container.  We are not even couting all of the other work you need to do with the database container and linking them together.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;web:
  image: demo-app-dev
  volumes:
    - .:/usr/src/app
  ports:
    - &amp;quot;80:8000&amp;quot;
  links:
    - db

db:
  image: postgres:9.3
  ports:
    - &amp;quot;5432:5432&amp;quot;
  environment:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: &amp;quot;&amp;quot;
    PGPASSWORD: &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With docker-compose, you can build up a quite a bit of automation with make which you can then treat the entire stack as a service that you can just do service up and service down.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;app=demo-app

docker_dev_build:
    docker build -t $(app)-dev -f Dockerfile.dev .

docker_dev_up:
    docker-compose -f dev.yml up

docker_dev_rm:
    docker-compose -f dev.yml rm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Initial Setup&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For initializing the database for the first time, we can set up have docker-compose execute the psql utility to create some databases for development and testing.  In addition, I added the psql goal to give me quick access to the psql utility inside the container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create_db:
	docker-compose -f dev.yml run db sh -c \
		&#39;psql -h &amp;quot;$$DB_PORT_5432_TCP_ADDR&amp;quot; -p &amp;quot;$$DB_PORT_5432_TCP_PORT&amp;quot; -U &amp;quot;$$DB_ENV_POSTGRES_USER&amp;quot; -c &amp;quot;CREATE DATABASE core&amp;quot;&#39;
	docker-compose -f dev.yml run db sh -c \
		&#39;psql -h &amp;quot;$$DB_PORT_5432_TCP_ADDR&amp;quot; -p &amp;quot;$$DB_PORT_5432_TCP_PORT&amp;quot; -U &amp;quot;$$DB_ENV_POSTGRES_USER&amp;quot; -c &amp;quot;CREATE DATABASE test&amp;quot;&#39;

psql:
	docker-compose -f dev.yml run db sh -c \
		&#39;psql -h &amp;quot;$$DB_PORT_5432_TCP_ADDR&amp;quot; -p &amp;quot;$$DB_PORT_5432_TCP_PORT&amp;quot; -U &amp;quot;$$DB_ENV_POSTGRES_USER&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have all of the databases created, we can execute the init script from Python which will create all the tables.  Also, I can run my unit test within the same environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;init_db:
	docker-compose -f dev.yml run web python manage.py init

test:
	docker-compose -f dev.yml run web nosetests -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Conclusion&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this approach, we can produce a reproducible environment for development and testing.  Instead of using a different database such as SQLite, or setting up a local instance of Postgres which will like to change over time, we can reproduce the same environment rapidly using make, docker, and docker-compose.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dynamically Create Javascript Classes</title>
      <link>http://kfeng.me/2014/08/dynamically-create-javascript-classes/</link>
      <pubDate>Tue, 12 Aug 2014 22:13:48 -0400</pubDate>
      
      <guid>http://kfeng.me/2014/08/dynamically-create-javascript-classes/</guid>
      <description>

&lt;h4 id=&#34;problem:dbd9d4c9239a90647f9fb5991a49eb3b&#34;&gt;Problem&lt;/h4&gt;

&lt;p&gt;Recently, I was asked to think of a way to dynamically create classes, which have static methods that are slightly different among dynamically created classes.&lt;/p&gt;

&lt;h4 id=&#34;solution:dbd9d4c9239a90647f9fb5991a49eb3b&#34;&gt;Solution&lt;/h4&gt;

&lt;p&gt;&lt;script src=&#34;https://gist.github.com/kennethzfeng/c9d65c3b736c787414b5.js&#34;&gt;&lt;/script&gt;
I used a factory-like function to generate class with a static method that closes on the parameter name.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://kfeng.me/pages/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://kfeng.me/pages/about/</guid>
      <description>

&lt;h2 id=&#34;profile:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Profile&lt;/h2&gt;

&lt;h3 id=&#34;work-experience:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Work Experience&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Business Systems Developer&lt;/strong&gt; @ Intermedia | January 2015 - Present&lt;br&gt;
&lt;strong&gt;Business Systems Analyst&lt;/strong&gt; @ Intermedia | May 2013 - December 2014&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Build and maintain Mulesoft Cloudhub integrations with NetSuite (ERP), Salesforce (CRM), Coupa, Marketo, MS SQL Server using Java / Spring Framework&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Design and support internal tools hosted on the Finance IT application server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Expose Consolidated Exchange Rates and in NetSuite as REST API&lt;/li&gt;
&lt;li&gt;Develope accounting tools for decoding QFX file and merging with CSV file using Python / Flask / Bootstrap&lt;/li&gt;
&lt;li&gt;Enhance Journal Entry Approval in NetSuite via NetSuite SuiteBundle plugin using SuiteScript (JavaScript)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Revenue Operations Analyst&lt;/strong&gt; @ Intermedia | May 2012 – April 2013&lt;br&gt;
&lt;strong&gt;Billing Accountant&lt;/strong&gt; @ Intermedia | September 2011 – April 2012&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identified billing limitations among distributor platforms and successfully communicated various requirements needed for platform integration to the product manager&lt;/li&gt;
&lt;li&gt;Authored an IronPython script which cuts down monthly distributor channel order to invoice processing time by eight hours&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Compliance Assistant&lt;/strong&gt; @ Chinatown Federal Savings Bank | September 2011 – April 2012&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built tools to query various spreadsheets using VBA’s ADODB Connection and speeded up the investigation workflow&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;languages-technologies:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Languages &amp;amp; Technologies&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python, Java, Go, R, SQL, Javascript, CSS&lt;/li&gt;
&lt;li&gt;Linux, OS X, SAML, SOAP, REST, JIRA, Git, Maven&lt;/li&gt;
&lt;li&gt;IPython, Numpy, Pandas, and Microsoft Excel with the PowerPivot plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;education:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Education&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CUNY Baruch College&lt;/strong&gt;&lt;br&gt;
New York, NY&lt;br&gt;
August 2006 - June 2010&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;B.B.A. in Finance and minored in Discrete Mathematics, June 2010. Magna Cum Laude. GPA: 3.8 / 4.0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Coursework&lt;/strong&gt;: Fundamentals of Data Structures and Algorithms, Combinatorics, and Graph Theory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Coursera&lt;/strong&gt;&lt;br&gt;
Online&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kfeng.me/pdfs/coursera-computing-for-data-analysis.pdf&#34;&gt;Computing for Data Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kfeng.me/pdfs/coursera-ml.pdf&#34;&gt;Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kfeng.me/pdfs/coursera-data-analysis.pdf&#34;&gt;Data Analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;conferences-hackathons:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Conferences &amp;amp; Hackathons&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;PyGotham 2014 Attendee&lt;/li&gt;
&lt;li&gt;Comcast NBC Universal 2014 Hackathon Winner&lt;/li&gt;
&lt;li&gt;Cornell HackMedNYC 2014 Attendee&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;languages:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Languages&lt;/h3&gt;

&lt;p&gt;Fluent in Cantonese and Mandarin&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>